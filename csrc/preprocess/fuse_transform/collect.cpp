// Copyright (c) OpenMMLab. All rights reserved.

#include "archive/json_archive.h"
#include "archive/value_archive.h"
#include "fuse_transform.h"

namespace mmdeploy {

class MMDEPLOY_API Collect : public FuseTransform {
 public:
  explicit Collect(const Value& args, int version = 0) : FuseTransform(args) {
    if (!args.contains("keys") || !args["keys"].is_array()) {
      throw std::invalid_argument(
          "'keys' is missed in arguments, or it is not an array as expected");
    }
    if (args.contains("meta_keys") && !args["meta_keys"].is_array()) {
      throw std::invalid_argument("'meta_keys' has to be an array");
    }

    for (auto& v : args["keys"]) {
      arg_.keys.push_back(v.get<std::string>());
    }
    if (args.contains("meta_keys")) {
      for (auto& v : args["meta_keys"]) {
        arg_.meta_keys.push_back(v.get<std::string>());
      }
    }
    // trace info
    arg_.keys.push_back("trans_info");
  }
  ~Collect() override = default;

  Result<Value> Process(const Value& input) override {
    Value output;

    // collect 'ori_img' and 'attribute' from `input`, because those two fields
    // are given by users, not generated by transform ops
    if (input.contains("ori_img")) {
      output["ori_img"] = input["ori_img"];
    }
    if (input.contains("attribute")) {
      output["attribute"] = input["attribute"];
    }

    for (auto& meta_key : arg_.meta_keys) {
      if (input.contains(meta_key)) {
        output["img_metas"][meta_key] = input[meta_key];
      }
    }
    for (auto& key : arg_.keys) {
      if (!input.contains(key)) {
        MMDEPLOY_ERROR("missed key '{}' in input", key);
        //      return Status(eInvalidArgument);
        return Status(eInvalidArgument);
      } else {
        output[key] = input[key];
      }
    }

    MMDEPLOY_DEBUG("output: {}", to_json(output).dump(2));
    return output;
  }

 protected:
  struct collect_arg_t {
    std::vector<std::string> keys;
    std::vector<std::string> meta_keys;
  };
  using ArgType = collect_arg_t;

  ArgType arg_;
};

DECLARE_AND_REGISTER_MODULE(FuseTransform, Collect, 1);

}  // namespace mmdeploy