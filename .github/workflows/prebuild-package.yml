name: prebuild-package

on:
  workflow_dispatch:
    inputs:
      build-on-win10:
        description: 'Build on Windows 10'
        required: true
        type: boolean
        default: false
      build-on-ubuntu:
        required: true
        description: 'Build on Ubuntu'
        type: boolean
        default: true
      target-backends-cpu:
        description: 'Target backends for cpu (none to skip)'
        type: string
        required: false
        default: 'ort;openvino'
      target-backends-cuda:
        description: 'Target backends for cuda (none to skip)'
        type: string
        required: false
        default: 'none'
      ver-info:
        description: 'Version setting'
        type: string
        required: true
        default: '{
          "opencv": "4.5.5",
          "pplcv": "0.7.0",
          "onnxruntime": "1.8.1",
          "openvino": "2022.2",
          "tensorrt": "8.2.3.0",
          "cudnn": "8.2.1",
          "cuda": "10.2;11.1",
          "ubuntu": "18.04"
        }'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions: write-all

jobs:
  linux-x86_64_build_matrix:
    runs-on: ubuntu-latest
    outputs:
      device: ${{ steps.set-matrix.outputs.device }}
      os: ${{ steps.set-matrix.outputs.os }}
      cuda: ${{ steps.set-matrix.outputs.cuda }}
    steps:
      - uses: actions/github-script@v6
        id: set-matrix
        with:
          script: |
            if (context.eventName === "workflow_dispatch") {
              DEVICE = ["cpu"]
              if ("${{ github.event.inputs.target-backends-cuda }}" != "") {
                DEVICE.push("cuda")
              }
              core.setOutput('device', DEVICE)
              var OS = "${{ fromJson(github.event.inputs.ver-info).ubuntu }}"
              OS = OS.split(";").map(v => "ubuntu-" + v)
              core.setOutput('os', OS)
              var CUDA = "${{ fromJson(github.event.inputs.ver-info).cuda }}"
              core.setOutput('cuda', CUDA.split(';'))
            }

  linux-x86_64_prepare_cpu:
    name: prepare_cpu
    needs: linux-x86_64_build_matrix
    strategy:
      matrix:
        os: ${{ fromJSON(needs.linux-x86_64_build_matrix.outputs.os) }}
    runs-on: ${{ matrix.os }}
    steps:
      - run: |
          mkdir -p ${{ github.workspace }}/artifact
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: build-opencv
        run: |
          echo "build opencv" > "${{ matrix.os }}-opencv"
          # ver="${{ fromJson(github.event.inputs.ver-info).opencv }}"
          # python3 .github/scripts/prebuild_tools/install_opencv.py \
          #   --platform linux --version $ver
          mkdir -p artifact/opencv/build/install/opencv-files
          ls -lh
      - name: upload-opencv
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}-opencv
          path: ${{ github.workspace }}/artifact/opencv/build/install

  linux-x86_64_prepare_cuda:
    name: prepare_cuda
    needs: linux-x86_64_build_matrix
    if: ${{ github.event.inputs.target-backends-cuda != 'none' }}
    strategy:
      matrix:
        os: ${{ fromJSON(needs.linux-x86_64_build_matrix.outputs.os) }}
        cuda: ${{ fromJSON(needs.linux-x86_64_build_matrix.outputs.cuda) }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: build-pplcv
        run: |
          echo "build pplcv" > "${{ matrix.os }}-cuda${{ matrix.cuda }}-pplcv"
      - name: Upload pplcv for job
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}-cuda${{ matrix.cuda }}-pplcv
          path: ${{ matrix.os }}-cuda${{ matrix.cuda }}-pplcv

  linux-x86_64_build_cpu:
    name: build_cpu
    needs: [linux-x86_64_prepare_cpu, linux-x86_64_build_matrix]
    if: ${{ github.event.inputs.target-backends-cpu != 'none' }}
    strategy:
      matrix:
        os: ${{ fromJSON(needs.linux-x86_64_build_matrix.outputs.os) }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: download-onnxruntime
        run: |
          ver="${{ fromJson(github.event.inputs.ver-info).onnxruntime }}"
          python3 .github/scripts/prebuild_tools/install_onnxruntime.py \
            --platform linux --version $ver --work-dir ../third_party
      - name: download-openvino
        run: |
          ver="${{ fromJson(github.event.inputs.ver-info).openvino }}"
          sys="$(echo ${{ matrix.os }} | cut -d "-" -f2)"
          python3 .github/scripts/prebuild_tools/install_openvino.py \
            --platform linux --version $ver --work-dir ../third_party --system $sys
      - name: download-opencv
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.os }}-opencv
          path: ../third_party
      - name: Echo
        run: |
          ls ../third_party/ -lh

  linux-x86_64_build_cuda:
    name: build_cuda
    needs:
      - linux-x86_64_prepare_cpu
      - linux-x86_64_prepare_cuda
      - linux-x86_64_build_matrix
    if: ${{ github.event.inputs.target-backends-cuda != 'none' }}
    strategy:
      matrix:
        os: ${{ fromJSON(needs.linux-x86_64_build_matrix.outputs.os) }}
        cuda: ${{ fromJSON(needs.linux-x86_64_build_matrix.outputs.cuda) }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: download-pplcv
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.os }}-${{ matrix.cuda }}-pplcv
      - name: Echo
        run: |
          ls
          cat ${{ matrix.os }}-${{ matrix.cuda }}-pplcv




  # linux-x86-64_deploy:
  #   name: deploy
  #   needs: linux-x86-64_build
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: download artifact
  #     - name: deploy


  # ubuntu20-04-prebuild-package:
  #   runs-on: ubuntu-18.04
  #   container: nvidia/cuda:11.3.0-cudnn8-devel-ubuntu18.04
  #   steps:
  #     - name: Echo
  #       run: |
  #         echo "hello"
  #     - name: DABAO
  #       run: |
  #         touch mmdeploy
  #         tar cf mmdeploy.tar.gz mmdeploy
  #     - name: Release
  #       uses: softprops/action-gh-release@v1
  #       if: startsWith(github.ref, 'refs/tags/v')
  #       with:
  #         files: |
  #           mmdeploy.tar.gz

  # https://docs.github.com/en/actions/using-workflows/storing-workflow-data-as-artifacts
  # https://dev.to/n3wt0n/github-composite-actions-nest-actions-within-actions-3e5l