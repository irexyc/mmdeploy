name: prebuild-package

# ${{ github.event.inputs.message }}

on:
  push:
    tags:
      - 'v**'
  workflow_dispatch:
    inputs:
      build-on-win10:
        description: 'Build on Windows 10'
        required: true
        type: boolean
        default: true
      build-on-ubuntu-18-04:
        required: true
        description: 'Build on Ubuntu 18.04'
        type: boolean
        default: true
      target-backends-cpu:
        description: 'Target backends for cpu (none to skip)'
        type: string
        required: false
        default: 'ort;openvino;ncnn'
      target-backends-cuda:
        description: 'Target backends for cuda (none to skip)'
        type: string
        required: false
        default: 'ort;trt;ncnn'
      opencv-ver:
        description: 'OpenCV version'
        type: string
        required: false
        default: '4.5.5'
      onnxruntime-ver:
        description: 'ONNXRuntime version'
        type: string
        required: false
        default: '1.8.1'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions: write-all

jobs:
  windows-10-cpu:
    runs-on: windows-latest
    if: (github.event.inputs.build-on-win10 == 'true') && (github.event.inputs.target-backends-cpu != 'none')
    steps:
      # - name: Install OpenCV
      #   run: |
      #     git clone -b ${{ github.event.inputs.opencv-ver}} --depth=1 https://github.com/opencv/opencv.git
      #     cd opencv; mkdir build; cd build
      #     cmake .. -A x64 -T v142 -DBUILD_TESTS=OFF -DBUILD_PERF_TESTS=OFF -DBUILD_SHARED_LIBS=OFF -DBUILD_JAVA=OFF `
      #       -DBUILD_opencv_java=OFF -DBUILD_opencv_python2=OFF -DBUILD_opencv_python3=OFF
      #     cmake --build . --config Release -j
      #     cmake --install . --config Release
      - name: Install ONNXRuntime
        working-directory: ..
        run: |
          pwd
          $onnxruntimeVer = ${{ github.event.inputs.onnxruntime-ver }}
          $url = 'https://github.com/microsoft/onnxruntime/releases/download/v$onnxruntimeVer/onnxruntime-win-x64-$onnxruntimeVer.zip'
          echo $url

      # - name: Install Conda
      #   uses: conda-incubator/setup-miniconda@v2
      # - name: Install python
      #   run: |
      #     conda create -n mmdeploy-3.6 python=3.6
      #     conda create -n mmdeploy-3.7 python=3.7
      #     conda create -n mmdeploy-3.8 python=3.8
      #     conda create -n mmdeploy-3.9 python=3.9
      # - name: Checkout repository
      #   uses: actions/checkout@v3
      #   with:
      #     submodules: 'recursive'
      # - name: Build
      #   run: |
      #     ls
      #     Compress-Archive -Path csrc -DestinationPath win.zip
      #     ls
      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          files: |
            win.zip

  # windows-10-cuda:
  #   runs-on: windows-latest
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3
  #       with:
  #         submodules: 'recursive'

  # ubuntu20-04-prebuild-package:
  #   runs-on: ubuntu-18.04
  #   container: nvidia/cuda:11.3.0-cudnn8-devel-ubuntu18.04
  #   steps:
  #     - name: Echo
  #       run: |
  #         echo "hello"
  #     - name: DABAO
  #       run: |
  #         touch mmdeploy
  #         tar cf mmdeploy.tar.gz mmdeploy
  #     - name: Release
  #       uses: softprops/action-gh-release@v1
  #       if: startsWith(github.ref, 'refs/tags/v')
  #       with:
  #         files: |
  #           mmdeploy.tar.gz