name: prebuild-package

on:
  workflow_dispatch:
    inputs:
      build-on-win10:
        description: 'Build on Windows 10'
        required: true
        type: boolean
        default: true
      build-on-ubuntu:
        required: true
        description: 'Build on Ubuntu'
        type: boolean
        default: true
      target-backends-cpu:
        description: 'Target backends for cpu (none to skip)'
        type: string
        required: false
        default: 'ort;openvino;ncnn'
      target-backends-cuda:
        description: 'Target backends for cuda (none to skip)'
        type: string
        required: false
        default: 'ort;trt;ncnn'
      ver-info:
        description: 'Version setting'
        type: string
        required: true
        default: '{
          "opencv": "4.5.5",
          "pplcv": "0.7.1",
          "onnxruntime": "1.8.1",
          "ncnn": "20221128",
          "openvino": "2022.2",
          "tensorrt": "8.2.3.0",
          "cudnn": "8.2.1",
          "cuda": "10.2;11.1",
          "ubuntu": "18.04;20.04;22.04"
        }'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions: write-all

jobs:
  # windows-10-cpu:
  #   runs-on: windows-latest
  #   if: (github.event.inputs.build-on-win10 == 'true') && (github.event.inputs.target-backends-cpu != 'none')
  #   steps:
  #     - name: Install OpenCV
  #       working-directory: ..
  #       run: |
  #         git clone -b ${{ fromJson(github.event.inputs.ver-info).opencv }} --depth=1 https://github.com/opencv/opencv.git
  #         cd opencv; mkdir build; cd build
  #         cmake .. -A x64 -T v142 -DBUILD_TESTS=OFF -DBUILD_PERF_TESTS=OFF -DBUILD_SHARED_LIBS=OFF `
  #           -DBUILD_WITH_STATIC_CRT=OFF -DBUILD_JAVA=OFF -DBUILD_opencv_java=OFF -DBUILD_opencv_python2=OFF `
  #           -DBUILD_opencv_python3=OFF
  #         cmake --build . --config Release -j
  #         cmake --install . --config Release
  #         cd install/x64/vc16/staticlib
  #         $OpenCV_DIR = [IO.Path]::Combine("$pwd")
  #         echo "OpenCV_DIR=$OpenCV_DIR" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
  #     - name: Install ONNX Runtime
  #       working-directory: ..
  #       run: |
  #         $onnxruntimeVer = "${{ fromJson(github.event.inputs.ver-info).onnxruntime }}"
  #         $url = "https://github.com/microsoft/onnxruntime/releases/download/v$onnxruntimeVer/onnxruntime-win-x64-$onnxruntimeVer.zip"
  #         $out = "onnxruntime"
  #         echo $url
  #         Invoke-WebRequest -Uri $url -OutFile "$out.zip"
  #         Expand-Archive "$out.zip" $out
  #         $ONNXRUNTIME_DIR = [IO.Path]::Combine("$pwd", "$out", "$(ls $out)")
  #         echo "ONNXRUNTIME_DIR=$ONNXRUNTIME_DIR" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
  #     - name: Install Conda
  #       uses: conda-incubator/setup-miniconda@v2
  #     - name: Install python
  #       run: |
  #         conda create -n mmdeploy-3.6 python=3.6
  #         conda create -n mmdeploy-3.7 python=3.7
  #         conda create -n mmdeploy-3.8 python=3.8
  #         conda create -n mmdeploy-3.9 python=3.9
  #     - name: Checkout repository
  #       uses: actions/checkout@v3
  #       with:
  #         submodules: 'recursive'
  #     - name: Build
  #       run: |
  #         conda activate mmdeploy-3.6
  #         pip install pyyaml packaging
  #         mkdir packing; cd packing
  #         python ../tools/package_tools/mmdeploy_builder.py ../tools/package_tools/configs/windows_x64-cpu.yaml ../
  #         $pkg = $(ls).Name
  #         Compress-Archive -Path $pkg -DestinationPath "$pkg.zip"
  #     - name: Deploy
  #       uses: softprops/action-gh-release@v1
  #       if: startsWith(github.ref, 'refs/tags/v')
  #       with:
  #         files: |
  #           packing/*.zip

  cuda_matrix:
    runs-on: ubuntu-18.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.result }}
    steps:
      - uses: actions/github-script@v6
        id: set-matrix
        with:
          script: |
            if (context.eventName === "workflow_dispatch") {
              var cuda_var = "${{ fromJson(github.event.inputs.ver-info).cuda }}"
              cuda_var = cuda_var.replace('10.2', '10.2.89')
              cuda_var = cuda_var.replace('11.1', '11.1.1')
              cuda_var = cuda_var.replace('11.2', '11.2.2')
              cuda_var = cuda_var.replace('11.3', '11.3.1')
              cuda_var = cuda_var.replace('11.4', '11.4.3')
              cuda_var = cuda_var.replace('11.5', '11.5.2')
              cuda_var = cuda_var.replace('11.6', '11.6.2')
              cuda_var = cuda_var.replace('11.7', '11.7.0')
              return cuda_var.split(';')
            }

  windows-10-cuda:
    needs: cuda_matrix
    runs-on: windows-latest
    if: (github.event.inputs.build-on-win10 == 'true') && (github.event.inputs.target-backends-cuda != 'none')
    strategy:
      matrix:
        cuda-version: ${{ fromJSON(needs.cuda_matrix.outputs.matrix) }}
    steps:
      - name: Install CUDA
        uses: Jimver/cuda-toolkit@v0.2.8
        with:
          cuda: ${{ matrix.cuda-version }}
      - name: Install ppl.cv
        working-directory: ..
        run: |
          ${pplcv-ver} = "${{ fromJson(github.event.inputs.ver-info).pplcv }}"
          git clone -b v${pplcv-ver} --depth 1 https://github.com/openppl-public/ppl.cv.git
          cd ppl.cv; mkdir pplcv-build; cd pplcv-build
          cmake .. -A x64 -T v142,cuda="$env:CUDA_PATH" `
            -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install -DPPLCV_USE_CUDA=ON `
            -DPPLCV_USE_MSVC_STATIC_RUNTIME=OFF
          cmake --build . --config Release -j
          cmake --install . --config Release
          cd install/lib/cmake/ppl
          $pplcv_DIR = [IO.Path]::Combine("$pwd")
          echo "pplcv_DIR=$pplcv_DIR" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      - name: Install OpenCV
        working-directory: ..
        run: |
          git clone -b ${{ fromJson(github.event.inputs.ver-info).opencv }} --depth=1 https://github.com/opencv/opencv.git
          cd opencv; mkdir build; cd build
          cmake .. -A x64 -T v142 -DBUILD_TESTS=OFF -DBUILD_PERF_TESTS=OFF -DBUILD_SHARED_LIBS=OFF `
            -DBUILD_WITH_STATIC_CRT=OFF -DBUILD_JAVA=OFF -DBUILD_opencv_java=OFF -DBUILD_opencv_python2=OFF `
            -DBUILD_opencv_python3=OFF
          cmake --build . --config Release -j
          cmake --install . --config Release
          cd install/x64/vc16/staticlib
          $OpenCV_DIR = [IO.Path]::Combine("$pwd")
          echo "OpenCV_DIR=$OpenCV_DIR" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      # - name: Install ONNX Runtime
      #   working-directory: ..
      #   run: |
      #     $onnxruntimeVer = "${{ fromJson(github.event.inputs.ver-info).onnxruntime }}"
      #     $url = "https://github.com/microsoft/onnxruntime/releases/download/v$onnxruntimeVer/onnxruntime-win-x64-$onnxruntimeVer.zip"
      #     $out = "onnxruntime"
      #     echo $url
      #     Invoke-WebRequest -Uri $url -OutFile "$out.zip"
      #     Expand-Archive "$out.zip" $out
      #     $ONNXRUNTIME_DIR = [IO.Path]::Combine("$pwd", "$out", "$(ls $out)")
      #     echo "ONNXRUNTIME_DIR=$ONNXRUNTIME_DIR" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      - name: Install TensorRT
        working-directory: ..
        run: |
          $url = "https://github.com/irexyc/mmdeploy-ci-resource/releases/download/tensorrt/TensorRT-8.2.3.0.Windows10.x86_64.cuda-11.4.cudnn8.2.zip"
          $out = "tensorrt"
          Invoke-WebRequest -Uri $url -OutFile "$out.zip"
          Expand-Archive "$out.zip" $out
          $TENSORRT_DIR = [IO.Path]::Combine("$pwd", "$out", "$(ls $out)")
          echo "TENSORRT_DIR=$TENSORRT_DIR" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          # set path & copy dll
      - name: Install cuDNN
        run: |
          $url = "https://github.com/irexyc/mmdeploy-ci-resource/releases/download/cudnn/cudnn-11.3-windows-x64-v8.2.1.32.zip"
          $out = "cudnn"
          Invoke-WebRequest -Uri $url -OutFile "$out.zip"
          Expand-Archive "$out.zip" $out
          $CUDNN_DIR = [IO.Path]::Combine("$pwd", "$out", "$(ls $out)")
          echo "CUDNN_DIR=$CUDNN_DIR" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          # set path & copy dll
      - name: Install Conda
        uses: conda-incubator/setup-miniconda@v2
      - name: Install python
        run: |
          conda create -n mmdeploy-3.6 python=3.6
          conda create -n mmdeploy-3.7 python=3.7
          conda create -n mmdeploy-3.8 python=3.8
          conda create -n mmdeploy-3.9 python=3.9
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - name: Build
        run: |
          conda activate mmdeploy-3.6
          pip install pyyaml packaging
          mkdir packing; cd packing
          python ../tools/package_tools/mmdeploy_builder.py ../tools/package_tools/configs/windows_x64-cuda.yaml ../
          $pkg = $(ls).Name
          Compress-Archive -Path $pkg -DestinationPath "$pkg.zip"
      - name: Deploy
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          files: |
            packing/*.zip

  linux_build_matrix:
    runs-on: ubuntu-latest
    outputs:
      device: ${{ steps.set-matrix.outputs.device }}
      # os: ${{ steps.set-matrix.outputs.os }}
      # cuda: ${{ steps.set-matrix.outputs.cuda }}
    steps:
      - uses: actions/github-script@v6
        id: set-matrix
        with:
          script: |
            if (context.eventName === "workflow_dispatch") {
              DEVICE = []
              if ("${{ github.event.inputs.target-backends-cpu }}" != "") {
                DEVICE.push("cpu")
              }
              if ("${{ github.event.inputs.target-backends-cuda }}" != "") {
                DEVICE.push("cuda")
              }
              console.log(DEVICE)
              core.setOutput('device', DEVICE)
            }

  linux-x86_64:
    needs: linux_build_matrix
    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04, ubuntu-22.04]
        device: ${{ fromJSON(needs.linux_build_matrix.outputs.device) }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: build-opencv
        if: ${{ matrix.device == 'cpu' }}
        id: build-opencv
        run: |
          echo "build opencv" > "${{ matrix.os }}-opencv"
          touch "${{ matrix.os }}-opencv"
      - name: build-pplcv
        if: ${{ matrix.device == 'cuda' }}
        id: build-pplcv
        run: |
          echo "build pplcv" > "${{ matrix.os }}-pplcv"
          touch "${{ matrix.os }}-pplcv"
      - name: Upload opencv for job
        if: ${{ matrix.device == 'cpu' }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}-opencv
          path: ${{ matrix.os }}-opencv
      - name: Upload pplcv for job
        if: ${{ matrix.device == 'cuda' }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}-pplcv
          path: ${{ matrix.os }}-pplcv

  linux-x86-64-build:
    needs: [linux-x86_64, linux_build_matrix]
    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04, ubuntu-22.04]
        device: ${{ fromJSON(needs.linux_build_matrix.outputs.device) }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: download-opencv
        if: ${{ matrix.device == 'cpu' }}
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.os }}-opencv
      - name: download-both
        if: ${{ matrix.device == 'cuda' }}
        uses: actions/download-artifact@v3
        with:
          name: |
            ${{ matrix.os }}-opencv
            ${{ matrix.os }}-pplcv
      - name: Echo
        run: |
          ls



  # ubuntu20-04-prebuild-package:
  #   runs-on: ubuntu-18.04
  #   container: nvidia/cuda:11.3.0-cudnn8-devel-ubuntu18.04
  #   steps:
  #     - name: Echo
  #       run: |
  #         echo "hello"
  #     - name: DABAO
  #       run: |
  #         touch mmdeploy
  #         tar cf mmdeploy.tar.gz mmdeploy
  #     - name: Release
  #       uses: softprops/action-gh-release@v1
  #       if: startsWith(github.ref, 'refs/tags/v')
  #       with:
  #         files: |
  #           mmdeploy.tar.gz
  # https://docs.github.com/en/actions/using-workflows/storing-workflow-data-as-artifacts
