name: build

on:
  push:
    paths-ignore:
      - ".github/scripts/**"
      - "demo/**"
      - "docker/**"
      - "tools/**"

  pull_request:
    paths-ignore:
      - ".github/scripts/**"
      - "demo/**"
      - "docker/**"
      - "tools/**"
      - "docs/**"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  build_cpu_model_convert:
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        python-version: [3.7]
        torch: [1.8.0, 1.9.0]
        mmcv: [1.4.2]
        include:
          - torch: 1.8.0
            torch_version: torch1.8
            torchvision: 0.9.0
          - torch: 1.9.0
            torch_version: torch1.9
            torchvision: 0.10.0
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install PyTorch
        run: pip install torch==${{matrix.torch}}+cpu torchvision==${{matrix.torchvision}}+cpu -f https://download.pytorch.org/whl/torch_stable.html
      - name: Install MMCV
        run: |
          pip install mmcv-full==${{matrix.mmcv}} -f https://download.openmmlab.com/mmcv/dist/cpu/${{matrix.torch_version}}/index.html
          python -c 'import mmcv; print(mmcv.__version__)'
      - name: Install unittest dependencies
        run: |
          pip install -r requirements.txt
          pip install -U numpy
      - name: Build and install
        run: rm -rf .eggs && pip install -e .
      - name: Run python unittests and generate coverage report
        run: |
          coverage run --branch --source mmdeploy -m pytest -rsE tests
          coverage xml
          coverage report -m

  build_cpu_sdk:
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - name: update
        run: sudo apt update
      - name: gcc-multilib
        run: |
          sudo apt install gcc-multilib g++-multilib wget libprotobuf-dev protobuf-compiler
          sudo apt update
          sudo apt install -y ffmpeg libsm6 libxext6 git ninja-build libglib2.0-0 libxrender-dev libc++1-9 libc++abi1-9
          sudo add-apt-repository ppa:ignaciovizzo/opencv3-nonfree
          sudo apt install libopencv-dev lcov wget
          pkg-config --libs opencv
      - name: Build and run SDK unit test without backend
        run: |
          mkdir -p build && pushd build
          cmake .. -DCMAKE_CXX_COMPILER=g++-7  -DMMDEPLOY_CODEBASES=all    -DMMDEPLOY_BUILD_SDK=ON     -DMMDEPLOY_BUILD_SDK_PYTHON_API=OFF     -DMMDEPLOY_TARGET_DEVICES=cpu   -DMMDEPLOY_COVERAGE=ON  -DMMDEPLOY_BUILD_TEST=ON
          make -j2
          mkdir -p mmdeploy_test_resources/transform
          cp ../tests/data/tiger.jpeg mmdeploy_test_resources/transform/
          ./bin/mmdeploy_tests
          lcov --capture --directory . --output-file coverage.info
          ls -lah coverage.info
          cp coverage.info ../

  cross_build_aarch64:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - name: update
        run: sudo apt update
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: gcc-multilib
        run: |
          sh -x tools/scripts/ubuntu_cross_build_aarch64.sh

  build_cuda102:
    runs-on: ubuntu-18.04
    container:
      image: pytorch/pytorch:1.9.0-cuda10.2-cudnn7-devel
    env:
      FORCE_CUDA: 1
    strategy:
      matrix:
        python-version: [3.7]
        torch: [1.9.0+cu102]
        mmcv: [1.4.2]
        include:
          - torch: 1.9.0+cu102
            torch_version: torch1.9
            torchvision: 0.10.0+cu102
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install system dependencies
        run: |
          apt-key adv --keyserver keyserver.ubuntu.com --recv-keys A4B469963BF863CC
          apt-get update && apt-get install -y ffmpeg libsm6 libxext6 git ninja-build libglib2.0-0 libxrender-dev python${{matrix.python-version}}-dev
          apt-get clean
          rm -rf /var/lib/apt/lists/*
      - name: Install PyTorch
        run: python -m pip install torch==${{matrix.torch}} torchvision==${{matrix.torchvision}} -f https://download.pytorch.org/whl/torch_stable.html
      - name: Install dependencies
        run: |
          python -V
          python -m pip install mmcv-full==${{matrix.mmcv}} -f https://download.openmmlab.com/mmcv/dist/cu102/${{matrix.torch_version}}/index.html
          CFLAGS=`python -c 'import sysconfig;print("-I"+sysconfig.get_paths()["include"])'` python -m pip install -r requirements.txt
          pip install -U pycuda
          python -m pip install -U numpy
      - name: Build and install
        run: |
          rm -rf .eggs && python -m pip install -e .
          python tools/check_env.py
      - name: Run unittests and generate coverage report
        run: |
          coverage run --branch --source mmdeploy -m pytest -rsE tests
          coverage xml
          coverage report -m

  build_cuda111:
    runs-on: ubuntu-18.04
    container:
      image: pytorch/pytorch:1.8.0-cuda11.1-cudnn8-devel

    strategy:
      matrix:
        python-version: [3.7]
        torch: [1.8.0+cu111]
        mmcv: [1.4.2]
        include:
          - torch: 1.8.0+cu111
            torch_version: torch1.8
            torchvision: 0.9.0+cu111

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install system dependencies
        run: |
          apt-key adv --keyserver keyserver.ubuntu.com --recv-keys A4B469963BF863CC
          apt-get update && apt-get install -y ffmpeg libsm6 libxext6 git ninja-build libglib2.0-0 libxrender-dev python${{matrix.python-version}}-dev
          apt-get clean
          rm -rf /var/lib/apt/lists/*
      - name: Install PyTorch
        run: python -m pip install torch==${{matrix.torch}} torchvision==${{matrix.torchvision}} -f https://download.pytorch.org/whl/torch_stable.html
      - name: Install dependencies
        run: |
          python -V
          python -m pip install mmcv-full==${{matrix.mmcv}} -f https://download.openmmlab.com/mmcv/dist/cu111/${{matrix.torch_version}}/index.html
          CFLAGS=`python -c 'import sysconfig;print("-I"+sysconfig.get_paths()["include"])'` python -m pip install -r requirements.txt
          pip install -U pycuda
          python -m pip install -U numpy
      - name: Build and install
        run: |
          rm -rf .eggs && python -m pip install -e .
          python tools/check_env.py
      - name: Run unittests and generate coverage report
        run: |
          coverage run --branch --source mmdeploy -m pytest -rsE tests
          coverage xml
          coverage report -m
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          file: ./coverage.xml,./coverage.info
          flags: unittests
          env_vars: OS,PYTHON,CPLUS
          name: codecov-umbrella
          fail_ci_if_error: false

  build_cuda102-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - name: Install cuda
        run: |
          Invoke-WebRequest -Uri https://github.com/irexyc/mmdeploy-ci-resource/releases/download/cuda/cuda_v10.2_win10.zip -OutFile cuda_v10.2_win10.zip
          Expand-Archive cuda_v10.2_win10.zip .
          New-Item 'C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA' -ItemType Directory
          Copy-Item 'v10.2\extras\visual_studio_integration\MSBuildExtensions\*' 'C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Msbuild\Microsoft\VC\v160\BuildCustomizations'
          Copy-Item 'v10.2\extras\visual_studio_integration\MSBuildExtensions\*' 'C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Msbuild\Microsoft\VC\v170\BuildCustomizations'
          Move-Item v10.2 'C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA'
          echo "CUDA_PATH=C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.2" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "CUDA_PATH_V10_2=C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.2" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.2\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      - name: Install cudnn
        run: |
          Invoke-WebRequest -Uri https://github.com/irexyc/mmdeploy-ci-resource/releases/download/cudnn/cudnn-10.2-windows10-x64-v8.2.1.32.zip -OutFile cudnn-10.2-windows10-x64-v8.2.1.32.zip
          Expand-Archive cudnn-10.2-windows10-x64-v8.2.1.32.zip .
          echo "CUDNN_DIR=$pwd\CUDA" >> $env:GITHUB_ENV
      - name: Install tensorrt
        run: |
          Invoke-WebRequest -Uri https://github.com/irexyc/mmdeploy-ci-resource/releases/download/tensorrt/TensorRT-8.2.3.0.Windows10.x86_64.cuda-10.2.cudnn8.2.zip -OutFile TensorRT-8.2.3.0.Windows10.x86_64.cuda-10.2.cudnn8.2.zip
          Expand-Archive TensorRT-8.2.3.0.Windows10.x86_64.cuda-10.2.cudnn8.2.zip .
          echo "TENSORRT_DIR=$pwd\TensorRT-8.2.3.0" >> $env:GITHUB_ENV
      - name: Install opencv
        run: |
          Invoke-WebRequest -Uri https://github.com/irexyc/mmdeploy-ci-resource/releases/download/opencv/opencv-win-amd64-4.5.5-vc16.zip -OutFile opencv-win-amd64-4.5.5-vc16.zip
          Expand-Archive opencv-win-amd64-4.5.5-vc16.zip .
          echo "OPENCV_DIR=$pwd\opencv-4.5.5\x64\vc16\lib" >> $env:GITHUB_ENV
      - name: Install pplcv
        run: |
          Invoke-WebRequest -Uri https://github.com/irexyc/mmdeploy-ci-resource/releases/download/pplcv/pplcv_cuda10.2.zip -OutFile pplcv_cuda10.2.zip
          Expand-Archive pplcv_cuda10.2.zip pplcv
          echo "PPLCV_DIR=$pwd\pplcv\lib\cmake\ppl" >> $env:GITHUB_ENV
      - name: Build
        run: |
          mkdir build
          cd build
          cmake ..  -A x64 -T v142 `
            -DMMDEPLOY_SHARED_LIBS=OFF `
            -DMMDEPLOY_BUILD_SDK_CSHARP_API=ON `
            -DMMDEPLOY_BUILD_SDK_PYTHON_API=ON `
            -DMMDEPLOY_BUILD_SDK=ON `
            -DMMDEPLOY_TARGET_DEVICES='cuda' `
            -DMMDEPLOY_TARGET_BACKENDS='trt' `
            -DMMDEPLOY_CODEBASES='all' `
            -Dpplcv_DIR="$env:PPLCV_DIR" `
            -DOpenCV_DIR="$env:OPENCV_DIR" `
            -DTENSORRT_DIR="$env:TENSORRT_DIR" `
            -DMMDEPLOY_BUILD_EXAMPLES=ON `
            -DCUDNN_DIR="$env:CUDNN_DIR"
          cmake --build . --config Release -- /m
          cmake --install . --config Release
          echo "MMDEPLOY_DIR=$pwd\install\lib\cmake\MMDeploy" >> $env:GITHUB_ENV
      - name: Build examples
        run: |
          cd build/install/example/cpp
          mkdir build
          cd build
          cmake .. -A x64 -T v142 `
            -DMMDeploy_DIR="env:MMDEPLOY_DIR" `
            -Dpplcv_DIR="$env:PPLCV_DIR" `
            -DOpenCV_DIR="$env:OPENCV_DIR"
          cmake --build . --config Release

  build_cuda111-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - name: Install cuda
        run: |
          Invoke-WebRequest -Uri https://github.com/irexyc/mmdeploy-ci-resource/releases/download/cuda/cuda_v11.1_win10.zip -OutFile cuda_v11.1_win10.zip
          Expand-Archive cuda_v11.1_win10.zip .
          New-Item 'C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA' -ItemType Directory
          Copy-Item 'v11.1\extras\visual_studio_integration\MSBuildExtensions\*' 'C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Msbuild\Microsoft\VC\v160\BuildCustomizations'
          Copy-Item 'v11.1\extras\visual_studio_integration\MSBuildExtensions\*' 'C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Msbuild\Microsoft\VC\v170\BuildCustomizations'
          Move-Item v11.1 'C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA'
          echo "CUDA_PATH=C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.1" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "CUDA_PATH_V11_1=C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.1" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.1\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      - name: Install cudnn
        run: |
          Invoke-WebRequest -Uri https://github.com/irexyc/mmdeploy-ci-resource/releases/download/cudnn/cudnn-11.3-windows-x64-v8.2.1.32_2.zip -OutFile cudnn-11.3-windows-x64-v8.2.1.32_2.zip
          Expand-Archive cudnn-11.3-windows-x64-v8.2.1.32_2.zip .
          echo "CUDNN_DIR=$pwd\CUDA" >> $env:GITHUB_ENV
      - name: Install tensorrt
        run: |
          Invoke-WebRequest -Uri https://github.com/irexyc/mmdeploy-ci-resource/releases/download/tensorrt/TensorRT-8.2.3.0.Windows10.x86_64.cuda-11.4.cudnn8.2.zip -OutFile TensorRT-8.2.3.0.Windows10.x86_64.cuda-11.4.cudnn8.2.zip
          Expand-Archive TensorRT-8.2.3.0.Windows10.x86_64.cuda-11.4.cudnn8.2.zip .
          echo "TENSORRT_DIR=$pwd\TensorRT-8.2.3.0" >> $env:GITHUB_ENV
      - name: Install opencv
        run: |
          Invoke-WebRequest -Uri https://github.com/irexyc/mmdeploy-ci-resource/releases/download/opencv/opencv-win-amd64-4.5.5-vc16.zip -OutFile opencv-win-amd64-4.5.5-vc16.zip
          Expand-Archive opencv-win-amd64-4.5.5-vc16.zip .
          echo "OPENCV_DIR=$pwd\opencv-4.5.5\x64\vc16\lib" >> $env:GITHUB_ENV
      - name: Install pplcv
        run: |
          Invoke-WebRequest -Uri https://github.com/irexyc/mmdeploy-ci-resource/releases/download/pplcv/pplcv_cuda11.0.zip -OutFile pplcv_cuda11.0.zip
          Expand-Archive pplcv_cuda11.0.zip pplcv
          echo "PPLCV_DIR=$pwd\pplcv\lib\cmake\ppl" >> $env:GITHUB_ENV
      - name: Build
        run: |
          mkdir build
          cd build
          cmake ..  -A x64 -T v142 `
            -DMMDEPLOY_SHARED_LIBS=OFF `
            -DMMDEPLOY_BUILD_SDK_CSHARP_API=ON `
            -DMMDEPLOY_BUILD_SDK_PYTHON_API=ON `
            -DMMDEPLOY_BUILD_SDK=ON `
            -DMMDEPLOY_TARGET_DEVICES='cuda' `
            -DMMDEPLOY_TARGET_BACKENDS='trt' `
            -DMMDEPLOY_CODEBASES='all' `
            -Dpplcv_DIR="$env:PPLCV_DIR" `
            -DOpenCV_DIR="$env:OPENCV_DIR" `
            -DTENSORRT_DIR="$env:TENSORRT_DIR" `
            -DMMDEPLOY_BUILD_EXAMPLES=ON `
            -DCUDNN_DIR="$env:CUDNN_DIR"
          cmake --build . --config Release -- /m
          cmake --install . --config Release
          echo "MMDEPLOY_DIR=$pwd\install\lib\cmake\MMDeploy" >> $env:GITHUB_ENV
      - name: Build examples
        run: |
          cd build/install/example/cpp
          mkdir build
          cd build
          cmake .. -A x64 -T v142 `
            -DMMDeploy_DIR="env:MMDEPLOY_DIR" `
            -Dpplcv_DIR="$env:PPLCV_DIR" `
            -DOpenCV_DIR="$env:OPENCV_DIR"
          cmake --build . --config Release
